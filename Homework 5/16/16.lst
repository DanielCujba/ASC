     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  
    13                                  ;Two character strings S1 and S2 are given. Obtain the string D by concatenating the elements found on odd positions in S2 and the elements found on even positions in S1.
    14                                  
    15                                  segment data use32 class=data
    16 00000000 616263626566                S1 db 'abcbef'
    17                                      l1 equ $-S1
    18 00000006 313233343536                S2 db '123456'
    19                                      l2 equ $-S2
    20 0000000C <res 00000006>              D resb l1/2+l2/2+l2 % 2
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26 00000000 BF00000000                      mov EDI,0
    27 00000005 BE00000000                      mov ESI,0
    28                                          S2_label:
    29 0000000A 8A86[06000000]                      mov AL,[S2+ESI]
    30 00000010 8887[0C000000]                      mov [D+EDI],AL
    31 00000016 47                                  inc EDI
    32 00000017 83C602                              add ESI,2
    33 0000001A 83FE06                              cmp ESI,l2
    34 0000001D 72EB                                jb S2_label
    35 0000001F BE00000000                      mov ESI,0
    36                                          S1_label:
    37 00000024 8A8436[01000000]                    mov AL,[S1+1+ESI*2]
    38 0000002B 8887[0C000000]                      mov [D+EDI],AL
    39 00000031 46                                  inc ESI
    40 00000032 47                                  inc EDI
    41 00000033 83FE03                              cmp ESI,l1/2
    42 00000036 72EC                                jb S1_label
    43                                          
    44                                          ; exit(0)
    45 00000038 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    46 0000003A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
