     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,fopen,fclose,printf,fread,strchr              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  import fread msvcrt.dll
    13                                  import strchr msvcrt.dll
    14                                  
    15                                  
    16                                  
    17                                  ; our data is declared here (the variables needed by our program)
    18                                  
    19                                  
    20                                  ;A text file is given. Read the content of the file, count the number of vowels and display the result on the screen. The name of text file is defined in the data segment.
    21                                  
    22                                  segment data use32 class=data
    23                                      ; ...
    24 00000000 746578742E74787400          file_path db "text.txt",0
    25 00000009 7200                        access_mode db "r",0
    26 0000000B 6165696F754145494F-         vowels db "aeiouAEIOU",0
    26 00000014 5500               
    27 00000016 546865206E756D6265-         message db "The number of vowels in the file is: %d",0
    27 0000001F 72206F6620766F7765-
    27 00000028 6C7320696E20746865-
    27 00000031 2066696C652069733A-
    27 0000003A 20256400           
    28 0000003E 00000000                    file dd 0
    29 00000042 00                          a db 0
    30 00000043 00000000                    count dd 0
    31                                  
    32                                  ; our code starts here
    33                                  segment code use32 class=code
    34                                      start:
    35                                          ; ...
    36 00000000 68[09000000]                    push dword access_mode
    37 00000005 68[00000000]                    push dword file_path
    38 0000000A FF15[00000000]                  call [fopen]
    39 00000010 83C408                          add ESP,4*2
    40 00000013 83F800                          cmp EAX,0
    41 00000016 7466                            jz end
    42 00000018 A3[3E000000]                    mov [file],EAX
    43                                          
    44 0000001D FF35[3E000000]                  push dword [file]
    45 00000023 6A01                            push dword 1
    46 00000025 6A01                            push dword 1
    47 00000027 68[42000000]                    push dword a
    48                                          loop_label:
    49 0000002C FF15[00000000]                  call [fread]
    50 00000032 83F800                          cmp EAX,0
    51 00000035 7421                            jz done
    52 00000037 FF35[42000000]                  push dword [a]
    53 0000003D 68[0B000000]                    push dword vowels
    54 00000042 FF15[00000000]                  call [strchr]
    55 00000048 83C408                          add ESP,4*2
    56 0000004B 83F800                          cmp EAX,0
    57 0000004E 74DC                            jz loop_label
    58 00000050 FF05[43000000]                  inc dword [count]
    59 00000056 EBD4                            jmp loop_label
    60                                          done:
    61 00000058 83C410                          add ESP,4*4
    62                                          ; exit(0)
    63 0000005B FF35[3E000000]                  push dword [file]
    64 00000061 FF15[00000000]                  call [fclose]
    65 00000067 83C404                          add ESP,4*1
    66 0000006A FF35[43000000]                  push dword [count]
    67 00000070 68[16000000]                    push dword message
    68 00000075 FF15[00000000]                  call [printf]
    69 0000007B 83C408                          add ESP,4*2
    70                                          end:  
    71 0000007E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    72 00000080 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
