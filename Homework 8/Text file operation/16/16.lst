     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,fopen,fclose,printf,fread             ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  import fread msvcrt.dll
    13                                  
    14                                  
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  
    18                                  
    19                                  ;A text file is given. Read the content of the file, count the number of letters 'y' and 'z' and display the values on the screen. The file name is defined in the data segment.
    20                                  
    21                                  segment data use32 class=data
    22                                      ; ...
    23 00000000 746578742E74787400          file_path db "text.txt",0
    24 00000009 7200                        access_mode db "r",0
    25 0000000B 546865206E756D6265-         message db `The number of 'y' in the file is: %d\nThe number of 'z' in the file is: %d`,0
    25 00000014 72206F662027792720-
    25 0000001D 696E20746865206669-
    25 00000026 6C652069733A202564-
    25 0000002F 0A546865206E756D62-
    25 00000038 6572206F6620277A27-
    25 00000041 20696E207468652066-
    25 0000004A 696C652069733A2025-
    25 00000053 6400               
    26 00000055 00000000                    file dd 0
    27 00000059 00                          a db 0
    28 0000005A 00000000                    count_y dd 0
    29 0000005E 00000000                    count_z dd 0
    30                                  
    31                                  ; our code starts here
    32                                  segment code use32 class=code
    33                                      start:
    34                                          ; ...
    35 00000000 68[09000000]                    push dword access_mode
    36 00000005 68[00000000]                    push dword file_path
    37 0000000A FF15[00000000]                  call [fopen]
    38 00000010 83C408                          add ESP,4*2
    39 00000013 83F800                          cmp EAX,0
    40 00000016 0F8481000000                    jz end
    41 0000001C A3[55000000]                    mov [file],EAX
    42                                          
    43 00000021 FF35[55000000]                  push dword [file]
    44 00000027 6A01                            push dword 1
    45 00000029 6A01                            push dword 1
    46 0000002B 68[59000000]                    push dword a
    47                                          
    48                                          loop_label:
    49 00000030 FF15[00000000]                  call [fread]
    50 00000036 83F800                          cmp EAX,0
    51 00000039 7436                            jz done
    52                                          
    53 0000003B 803D[59000000]79                cmp byte [a],"y"
    54 00000042 741D                            jz inc_y
    55 00000044 803D[59000000]59                cmp byte [a],"Y"
    56 0000004B 7414                            jz inc_y
    57                                          
    58 0000004D 803D[59000000]7A                cmp byte [a],"z"
    59 00000054 7413                            jz inc_z
    60 00000056 803D[59000000]5A                cmp byte [a],"Z"
    61 0000005D 740A                            jz inc_z
    62                                          
    63 0000005F EBCF                            jmp loop_label
    64                                          
    65                                          inc_y:
    66 00000061 FF05[5A000000]                  inc dword [count_y]
    67 00000067 EBC7                            jmp loop_label
    68                                          
    69                                          inc_z:
    70 00000069 FF05[5E000000]                  inc dword [count_z]
    71 0000006F EBBF                            jmp loop_label
    72                                          
    73                                          done:
    74 00000071 83C410                          add ESP,4*4
    75 00000074 FF35[55000000]                  push dword [file]
    76 0000007A FF15[00000000]                  call [fclose]
    77 00000080 83C404                          add ESP,4*1
    78                                          
    79 00000083 FF35[5E000000]                  push dword [count_z]
    80 00000089 FF35[5A000000]                  push dword [count_y]
    81 0000008F 68[0B000000]                    push dword message
    82 00000094 FF15[00000000]                  call [printf]
    83 0000009A 83C40C                          add ESP,4*3
    84                                          end:  
    85 0000009D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    86 0000009F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
