     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,printf,scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll  ; printf is a function that prints a formatted string to the standard output
    11                                  import scanf msvcrt.dll   ; scanf is a function that reads a formatted string from the standard input
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 256400                      read_number db "%d",0
    17 00000003 00000000                    a dd 0
    18 00000007 00000000                    b dd 0
    19 0000000B 53756D3D256400              message db "Sum=%d",0
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25                                          ; read a and b
    26 00000000 68[03000000]                    push    dword a
    27 00000005 68[00000000]                    push    dword read_number
    28 0000000A FF15[00000000]                  call    [scanf]
    29 00000010 83C408                          add    esp, 4*2
    30 00000013 68[07000000]                    push    dword b
    31 00000018 68[00000000]                    push    dword read_number
    32 0000001D FF15[00000000]                  call    [scanf]
    33 00000023 83C408                          add    esp, 4*2
    34                                          ;print out the sum
    35 00000026 A1[03000000]                    mov    eax, [a]
    36 0000002B 0305[07000000]                  add    eax, [b]
    37 00000031 50                              push    eax
    38 00000032 68[0B000000]                    push    dword message
    39 00000037 FF15[00000000]                  call    [printf]
    40 0000003D 83C408                          add    esp, 4*2
    41                                          ; exit(0)
    42 00000040 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    43 00000042 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
