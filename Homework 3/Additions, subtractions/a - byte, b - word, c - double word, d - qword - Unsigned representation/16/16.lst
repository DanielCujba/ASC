     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 12                          a db 12h
    14 00000001 A174                        b dw 74A1h
    15 00000003 49213F24                    c dd 243F2149h
    16 00000007 52E896829BC78A76            d dq 768AC79B8296E852h
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22 00000000 B800000000                      mov EAX,0
    23 00000005 BB00000000                      mov EBX,0
    24 0000000A A0[00000000]                    mov AL,[a]      ;EAX=a
    25 0000000F 668B1D[01000000]                mov BX,[b]      ;EBX=b
    26 00000016 01C3                            add EBX,EAX     ;EBX=b+a
    27 00000018 8B0D[03000000]                  mov ECX,[c]     ;ECX=c
    28 0000001E 29C1                            sub ECX,EAX     ;ECX=c-a
    29 00000020 29D9                            sub ECX,EBX     ;ECX=c-a-(b+a)
    30 00000022 030D[03000000]                  add ECX,[c]     ;ECX=c-a-(b+a)+c
    31                                          
    32                                          
    33                                          ; exit(0)
    34 00000028 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    35 0000002A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
