     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 12                          a db 12h
    14 00000001 A174                        b dw 74A1h
    15 00000003 49213F24                    c dd 243F2149h
    16 00000007 52E896829BC78A76            d dq 768AC79B8296E852h
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21 00000000 A0[00000000]                    mov AL,[a]      ;AL=a
    22 00000005 6698                            cbw
    23 00000007 98                              cwde
    24 00000008 99                              cdq             ;EDX:EAX=a
    25 00000009 8B1D[07000000]                  mov EBX,[d]
    26 0000000F 8B0D[0B000000]                  mov ECX,[d+4]   ;ECX:EBX=d
    27 00000015 29C3                            sub EBX,EAX
    28 00000017 19D1                            sbb ECX,EDX     ;ECX:EBX=d-a
    29 00000019 2B05[03000000]                  sub EAX,[c]     ;EAX=a-c
    30 0000001F 99                              cdq
    31 00000020 29C3                            sub EBX,EAX
    32 00000022 19D1                            sbb ECX,EDX     ;ECX:EBX=(d-a)-(a-c)
    33 00000024 2B1D[07000000]                  sub EBX,[d]
    34 0000002A 1B0D[0B000000]                  sbb ECX,[d+4]   ;ECX:EBX=(d-a)-(a-c)-d
    35                                      
    36                                          ; exit(0)
    37 00000030 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    38 00000032 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
