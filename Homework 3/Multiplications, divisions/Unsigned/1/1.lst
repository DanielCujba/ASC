     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 12                          a db 12h
    14 00000001 72AB8374                    b dd 7483AB72h
    15 00000005 52E896829BC78A76            c dq 768AC79B8296E852h
    16                                  
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20 00000000 A0[00000000]                    mov AL,[a]      ;AL=a
    21 00000005 F625[00000000]                  mul byte [a]    ;AX=a*a
    22 0000000B 6689C3                          mov BX,AX
    23 0000000E B800000000                      mov EAX,0
    24 00000013 6689D8                          mov AX,BX       ;EAX=a*a
    25 00000016 2B05[01000000]                  sub EAX,[b]     ;EAX=a*a-b
    26 0000001C 83C007                          add EAX,7       ;EAX=a*a-b+7
    27 0000001F BA00000000                      mov EDX,0       ;EDX:EAX=a*a-b+7
    28 00000024 BB00000000                      mov EBX,0       ;EBX=0
    29 00000029 8A1D[00000000]                  mov BL,[a]      ;EBX=a
    30 0000002F 83C302                          add EBX,2       ;EBX=2+a
    31 00000032 F7F3                            div EBX         ;EAX=(a*a-b+7)/(2+a)
    32 00000034 BA00000000                      mov EDX,0       ;EDX:EAX=(a*a-b+7)/(2+a)
    33 00000039 0305[05000000]                  add EAX,[c]
    34 0000003F 1315[09000000]                  adc EDX,[c+4]   ;EDX:EAX=c+(a*a-b+7)/(2+a)
    35                                          ; exit(0)
    36 00000045 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    37 00000047 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
