     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 9372                        a dw 7293h
    14 00000002 A8                          b db 0A8h
    15 00000003 49B7                        c dw 0B749h
    16 00000005 4B                          d db 4Bh
    17 00000006 72AB8374                    e dd 7483AB72h
    18 0000000A 9BC78A7600000000            x dq 768AC79Bh
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 A1[0A000000]                    mov EAX,[x]
    24 00000005 8B15[0E000000]                  mov EDX,[x+4]       ;EDX:EAX=x
    25 0000000B BB02000000                      mov EBX,2           ;EBX=2
    26 00000010 F7F3                            div EBX             ;EAX=x/2
    27 00000012 66BB0000                        mov BX,0
    28 00000016 8A1D[02000000]                  mov BL,[b]          ;BX=b
    29 0000001C 66031D[00000000]                add BX,[a]          ;BX=a+b
    30 00000023 89C1                            mov ECX,EAX         ;ECX=x/2
    31 00000025 66B86400                        mov AX,100          ;AX=100
    32 00000029 66F7E3                          mul BX              ;EAX=100*(a+b)
    33 0000002C 01C1                            add ECX,EAX         ;ECX=x/2+100*(a+b)
    34 0000002E 66B80300                        mov AX,3            ;AX=3
    35 00000032 66BA0000                        mov DX,0            ;DX:AX=3
    36 00000036 66BB0000                        mov BX,0            ;BX=0
    37 0000003A 8A1D[05000000]                  mov BL,[d]            ;BX=d
    38 00000040 66031D[03000000]                add BX,[c]          ;BX=c+d
    39 00000047 66F7F3                          div BX              ;AX=3/(c+d)
    40 0000004A BB00000000                      mov EBX,0
    41 0000004F 6689C3                          mov BX,AX           ;EBX=3/(c+d)
    42 00000052 29D9                            sub ECX,EBX         ;ECX=x/2+100*(a+b)-3/(c+d)
    43 00000054 A1[06000000]                    mov EAX,[e]         ;EAX=e
    44 00000059 F725[06000000]                  mul dword [e]       ;EDX:EAX=e*e
    45 0000005F 01C8                            add EAX,ECX
    46 00000061 83D200                          adc EDX,0           ;EDX:EAX=x/2+100*(a+b)-3/(c+d)+e*e
    47                                      
    48                                          ; exit(0)
    49 00000064 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 00000066 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
